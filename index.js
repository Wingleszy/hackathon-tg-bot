const TelegramBot = require('node-telegram-bot-api')
const express = require('express')
const axios = require('axios')
const cors = require('cors')
const { createWorker } = require('tesseract.js');
const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('users.db');
const fs = require('fs');


db.serialize(() => {
    db.run("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, number TEXT, owner TEXT, phone TEXT)");
});

function replaceEnglishLetters(str) {
    const replacements = {
        A: '–ê',
        B: '–í',
        E: '–ï',
        K: '–ö',
        M: '–ú',
        H: '–ù',
        O: '–û',
        P: '–†',
        C: '–°',
        T: '–¢',
        Y: '–£',
        X: '–•'
    };

    return str.split('').map(char => replacements[char] || char).join('');
}

const token = '6905969776:AAFNJRnHiHKIIdrypeWM_YCDzu34cPyq3fo'
const bot = new TelegramBot(token, {polling: true})
const app = express()

app.use(express.json())
app.use(cors())

bot.setMyCommands([
    {command: '/start', description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"},
    {command: '/add', description: "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤ –±–∞–∑—É"},
    {command: '/info', description: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"},
    {command: '/photo', description: "–ù–∞–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É –Ω–∞ —Ñ–æ—Ç–æ"},
    {command: '/find', description: "–ù–∞–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É"}  
])

const registrationState = {};

async function waitForMessage(chatId) {
    return new Promise(resolve => {
        bot.once('message', async (message) => {
            resolve(message);
        });
    });
}


bot.on('message', async msg => {
    const chatId = msg.chat.id
    const text = msg.text

    if (text === '/start') {
        await bot.sendSticker(chatId, 'https://tlgrm.eu/_/stickers/4a4/f28/4a4f2880-e005-3f8f-ab47-2bb189e7d263/29.webp')
        await bot.sendMessage(chatId, 'üíÄ –î–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—à–∏–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É, –ø–∏—à–∏ /find! ')
    }

    if (text === '/info') {
        await bot.sendSticker(chatId, 'https://tlgrm.eu/_/stickers/17a/d1d/17ad1d46-6d6d-3ff7-bbd4-9d054d9154c1/38.webp')
        await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! —è  NOMEROGRAMBOT —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ  —á—Ç–æ –±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ 
1Ô∏è‚É£.–ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥: –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "Start" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.
2Ô∏è‚É£.–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É.                                                           
3Ô∏è‚É£.–ï—Å–ª–∏ –≤—ã –Ω–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,–Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã`)
    }

    if (text === '/find') {
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã. –ù–∞–ø—Ä–∏–º–µ—Ä –ê123–ê–ü126: ')
        let result;
        db.serialize(() => {
            db.all("SELECT * FROM users", (err, rows) => {
                if (err) {
                    console.error(err.message);
                    return;
                }
                bot.once('message', async message => {
                    if (chatId === message.chat.id) {
                        rows.map(numer => {
                            if(numer.number.toLowerCase() == message.text.toLowerCase()) {
                                result = numer
                            } 
                        })
                        if(result) {
                            await bot.sendMessage(message.chat.id, '–í–ª–∞–¥–µ–ª–µ—Ü: ' + result.owner)
                            await bot.sendMessage(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + result.phone)
                            return await bot.sendSticker(message.chat.id, 'https://tlgrm.eu/_/stickers/592/e1c/592e1ce3-ec50-4ba8-8632-c1b97d404a73/51.webp')
                        } else {
                            await bot.sendMessage(message.chat.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                        }
                    }
                })
            });
        });

    }

    if (text === '/photo') {
        await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–æ–º–µ—Ä–∞ –º–∞—à–∏–Ω—ã: '); 
        
        bot.once('photo', async (message) => {
            if (chatId === message.chat.id) {
                const photoId = message.photo[message.photo.length - 1].file_id;
                
                try {
                    const photoUrl = await bot.getFileLink(photoId);
                    
                    const response = await axios.get(photoUrl, { responseType: 'arraybuffer' });
                    const imageBuffer = Buffer.from(response.data);
            
                    fs.writeFileSync('temp_photo.jpg', imageBuffer);
            
                    const worker = await createWorker('eng');
            
                    worker.setParameters({
                        tessedit_char_whitelist: '0123456789ABEKMHOPCTYX'
                    })
    
                    const { data: { text } } = await worker.recognize('temp_photo.jpg');
            
                    fs.unlinkSync('temp_photo.jpg');
            
                    let str = replaceEnglishLetters(text.trim())
                    await bot.sendMessage(message.chat.id, `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: ${str}`);
                    await worker.terminate();
                    let result;
                    db.serialize(() => {
                        db.all("SELECT * FROM users", async (err, rows) => {
                            if (err) {
                                console.error(err.message);
                                return;
                            }
                            rows.map(numer => {
                                if(numer.number.toLowerCase() == str.toLowerCase()) {
                                    result = numer
                                } 
                            })
                            if(result) {
                                await bot.sendMessage(message.chat.id, '–í–ª–∞–¥–µ–ª–µ—Ü: ' + result.owner)
                                await bot.sendMessage(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + result.phone)
                                return await bot.sendSticker(message.chat.id, 'https://tlgrm.eu/_/stickers/592/e1c/592e1ce3-ec50-4ba8-8632-c1b97d404a73/51.webp')
                            } else {
                                await bot.sendMessage(message.chat.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                            }
                        });
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
                }
            }
        });

    }

    
    if (text === '/add') {
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–≤—Ç–æ: ');
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ true –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        registrationState[chatId] = { inProgress: true };
        bot.once('message', async (message1) => {   
            if (chatId === message1.chat.id) {
                let owner = message1.text; 
                while (!/^[–ê-–Ø–Å–∞-—è—ë]/.test(owner)) {
                    await bot.sendMessage(message1.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û');
                    await bot.sendMessage(message1.chat.id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–≤—Ç–æ: ');
                    message1 = await waitForMessage(message1.chat.id);
                    owner = message1.text.trim();
                }
        
                await bot.sendMessage(message1.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–≤—Ç–æ: ');
                bot.once('message', async (message2) => {
                    if (chatId === message2.chat.id) {
                        let phone = message2.text.trim(); 
                        while (!/^\d{11}$/.test(phone)) {
                            await bot.sendMessage(message2.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 11 —Ü–∏—Ñ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.');
                            await bot.sendMessage(message2.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–≤—Ç–æ: ');
                            message2 = await waitForMessage(message2.chat.id);
                            phone = message2.text.trim();
                        }
            
                        await bot.sendMessage(message2.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ. –ù–∞–ø—Ä–∏–º–µ—Ä –ê123–ê–ü26: ');
                        bot.once('message', async (message3) => {
                            if (chatId === message3.chat.id) {
                                let number = message3.text.trim(); 
                                while (!/^[–ê-–Ø–ÅA-Z]{1}\d{3}[–ê-–Ø–ÅA-Z]{2}\d{2,3}$/.test(number)) {
                                    await bot.sendMessage(message3.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 7 –¥–æ 9 —Å–∏–º–≤–æ–ª–æ–≤.');
                                    await bot.sendMessage(message3.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ. –ù–∞–ø—Ä–∏–º–µ—Ä –ê123–ê–ü26: ');
                                    message3 = await waitForMessage(message3.chat.id);
                                    number = message3.text.trim();
                                }
                
                                const result = { owner, phone, number };
                                db.serialize(() => {
                                    db.run("INSERT INTO users (number, owner, phone) VALUES (?, ?, ?)", [result.number, result.owner, result.phone], function(err) {
                                        if (err) {
                                            return console.error(err.message);
                                        }
                                    });
                                });
                                await bot.sendSticker(message3.chat.id, 'https://tlgrm.eu/_/stickers/592/e1c/592e1ce3-ec50-4ba8-8632-c1b97d404a73/3.webp')
                                await bot.sendMessage(message3.chat.id, "–ì–æ—Ç–æ–≤–æ");

                                // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                delete registrationState[chatId];
                            }
                        });
                    }
                });
            }
        });
    }

})


const PORT = 3000
app.listen(PORT, () => {
    console.log('server stated ' + PORT);
})

